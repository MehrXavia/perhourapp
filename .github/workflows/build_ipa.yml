name: Flutter iOS IPA Build

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.19.5'
  IOS_DEPLOYMENT_TARGET: '12.0'
  FIREBASE_CORE_VERSION: '10.25.0'
  FIREBASE_INTERNAL_VERSION: '10.25.0'

jobs:
  build_ios:
    runs-on: macos-latest
    timeout-minutes: 40

    steps:
    # 1. Checkout code
    - uses: actions/checkout@v4

    # 2. Set up Flutter
    - uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        cache-key: flutter-ios-${{ hashFiles('pubspec.lock') }}

    # 3. Configure environment
    - name: Set up iOS-only environment
      run: |
        flutter config --no-enable-android
        flutter config --no-analytics
        mkdir -p ios/Pods
        
        # Set iOS deployment target
        sed -i '' "s/FLUTTER_TARGET=.*/FLUTTER_TARGET='-target-platform=ios'/" ios/Flutter/Generated.xcconfig
        echo "IPHONEOS_DEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET" >> ios/Flutter/Generated.xcconfig
        echo "ENABLE_BITCODE=NO" >> ios/Flutter/Generated.xcconfig

    # 4. Get Flutter dependencies
    - name: Get Flutter dependencies
      run: |
        flutter pub get

    # 5. Configure iOS project
    - name: Configure iOS project
      run: |
        cd ios
        
        # Update Podfile
        sed -i '' "s/platform :ios, .*/platform :ios, '$IOS_DEPLOYMENT_TARGET'/" Podfile
        
        # Add Firebase version pins
        if ! grep -q "FirebaseCore" Podfile; then
          echo "pod 'FirebaseCore', '$FIREBASE_CORE_VERSION'" >> Podfile
          echo "pod 'FirebaseCoreInternal', '$FIREBASE_INTERNAL_VERSION'" >> Podfile
        else
          sed -i '' "s/pod 'FirebaseCore', .*/pod 'FirebaseCore', '$FIREBASE_CORE_VERSION'/" Podfile
          sed -i '' "s/pod 'FirebaseCoreInternal', .*/pod 'FirebaseCoreInternal', '$FIREBASE_INTERNAL_VERSION'/" Podfile
        fi
        
        # Add post-install hook
        echo "post_install do |installer|" >> Podfile
        echo "  installer.pods_project.targets.each do |target|" >> Podfile
        echo "    target.build_configurations.each do |config|" >> Podfile
        echo "      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '$IOS_DEPLOYMENT_TARGET'" >> Podfile
        echo "      if target.name == 'FirebaseCoreInternal'" >> Podfile
        echo "        config.build_settings['SWIFT_VERSION'] = '5.0'" >> Podfile
        echo "        config.build_settings['SWIFT_COMPILATION_MODE'] = 'wholemodule'" >> Podfile
        echo "      end" >> Podfile
        echo "    end" >> Podfile
        echo "  end" >> Podfile
        echo "  installer.pods_project.build_configurations.each do |config|" >> Podfile
        echo "    config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'" >> Podfile
        echo "  end" >> Podfile
        echo "end" >> Podfile

    # 6. Install pods
    - name: Install iOS pods
      run: |
        cd ios
        sudo gem install cocoapods -v 1.15.2
        pod repo update
        pod install --verbose
        pod cache clean --all

    # 7. Clean build environment
    - name: Clean build
      run: |
        cd ios
        rm -rf ~/Library/Developer/Xcode/DerivedData/*
        xcodebuild clean -workspace Runner.xcworkspace -scheme Runner

    # 8. Set up code signing
    - name: Install Apple Certificate
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.CERTIFICATE_P12 }}
        p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}
        keychain-name: ios-build-keychain
        keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

    - name: Install Provisioning Profile
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
        echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > temp.mobileprovision
        UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(security cms -D -i temp.mobileprovision))
        mv temp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
        echo "PROFILE_UUID=$UUID" >> $GITHUB_ENV

    # 9. Build IPA
    - name: Build IPA
      run: |
        cd ios
        xcodebuild -workspace Runner.xcworkspace \
                  -scheme Runner \
                  -configuration Release \
                  -archivePath ../build/Runner.xcarchive \
                  clean archive \
                  CODE_SIGN_STYLE=Manual \
                  PROVISIONING_PROFILE_SPECIFIER=${{ env.PROFILE_UUID }} \
                  DEVELOPMENT_TEAM=${{ secrets.TEAM_ID }} \
                  OTHER_SWIFT_FLAGS="-Xfrontend -warn-long-function-bodies=500" \
                  COMPILER_INDEX_STORE_ENABLE=NO \
                  | xcpretty

        xcodebuild -exportArchive \
                  -archivePath ../build/Runner.xcarchive \
                  -exportOptionsPlist ../ExportOptions.plist \
                  -exportPath ../build \
                  -allowProvisioningUpdates

    # 10. Upload IPA
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: onservice24-${{ github.run_number }}.ipa
        path: build/Runner.ipa
        retention-days: 7